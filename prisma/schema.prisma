// schema.prisma

datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
  extensions = [vector]
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["typedSql", "postgresqlExtensions"]
}

enum body_type {
  slim
  average
  athletic
  curvy
}

enum clothing_type {
  top
  bottom
}

enum gender {
  male
  female
  neutral
}

model Item {
  id            String    @id
  clothing_type String?
  color         String?
  embedding     String?
  external_link String?
  gender        String?
  image_url     String?
  label_string  String?
  price         Int?
  provider      String?
  series_id     String
  title         String

  series        Series    @relation(fields: [series_id], references: [id])
  results       Result[]

  @@index([series_id])
  @@index([clothing_type])
  @@index([gender])
  @@index([price])
  @@index([provider])

  @@map("item")
}

model Param {
  id             Int          @id @default(autoincrement())
  clothing_type  clothing_type?
  created_at     DateTime     @default(now())
  gender         gender?
  model          String?

  recommendations Recommendation[]

  @@index([clothing_type])
  @@index([gender])
  @@index([model])

  @@map("param")
}

model Profile {
  user_id         String              @id
  avatar_url      String?
  created_at      DateTime            @default(now())
  username        String?

  recommendations Recommendation[]
  uploads         Upload[]
  activity_logs   UserActivityLog[]

  @@index([username])

  @@map("profile")
}

model Recommendation {
  id          Int        @id @default(autoincrement())
  created_at  DateTime   @default(now())
  param_id    Int?
  upload_id   Int?
  user_id     String?

  param         Param?     @relation(fields: [param_id], references: [id])
  upload        Upload?    @relation(fields: [upload_id], references: [id])
  user          Profile?   @relation(fields: [user_id], references: [user_id])
  suggestions   Suggestion[]

  @@index([param_id])  
  @@index([upload_id]) 
  @@index([user_id])   
  @@index([created_at])

  @@map("recommendation")
}

model Result {
  id            Int         @id @default(autoincrement())
  created_at    DateTime    @default(now())
  distance      Float?
  item_id       String?
  suggestion_id Int?

  item        Item?       @relation(fields: [item_id], references: [id])
  suggestion  Suggestion? @relation(fields: [suggestion_id], references: [id])

  @@index([item_id])       
  @@index([suggestion_id]) 
  @@index([distance])

  @@map("result")
}

model Series {
  id            String     @id
  clothing_type String?
  external_link String?
  gender        gender?
  price         String?
  provider      String?
  title         String?

  items         Item[]

  @@index([clothing_type])
  @@index([gender])
  @@index([price])
  @@index([provider])

  @@map("series")
}

model Suggestion {
  id                Int        @id @default(autoincrement())
  created_at        DateTime   @default(now())
  description       String?
  label_string      String?
  recommendation_id Int?
  style_name        String?

  recommendation  Recommendation? @relation(fields: [recommendation_id], references: [id])
  results         Result[]

  @@index([recommendation_id])
  @@index([style_name])

  @@map("suggestion")
}

model Upload {
  id             Int        @id @default(autoincrement())
  created_at     DateTime   @default(now())
  image_url      String?
  user_id        String?

  user           Profile?   @relation(fields: [user_id], references: [user_id])
  recommendations Recommendation[]

  @@index([user_id])

  @@map("upload")
}

model UserActivityLog {
  id          Int       @id @default(autoincrement())
  created_at  DateTime  @default(now())
  description String?
  user_id     String?

  user        Profile?  @relation(fields: [user_id], references: [user_id])

  @@index([user_id])

  @@map("useractivitylog")
}
