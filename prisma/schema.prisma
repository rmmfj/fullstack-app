// schema.prisma

datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
  extensions = [vector]
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["typedSql", "postgresqlExtensions"]
}

enum body_type {
  slim
  average
  athletic
  curvy
}

enum clothing_type {
  top
  bottom
}

enum gender {
  male
  female
  neutral
}

model Item {
  id            String    @id
  clothing_type String?
  color         String?
  embedding     String?
  external_link String?
  gender        String?
  image_url     String?
  label_string  String?
  price         Int?
  provider      String?
  series_id     String
  title         String

  results       Result[]
  activity_items UserActivityItem[]

  @@index([series_id])
  @@index([clothing_type])
  @@index([gender])
  @@index([price])
  @@index([provider])

  @@map("item")
}

model Param {
  id             Int          @id @default(autoincrement())
  clothing_type  clothing_type?
  created_at     DateTime     @default(now())
  gender         gender?
  model          String?

  recommendations Recommendation[]

  @@index([clothing_type])
  @@index([gender])
  @@index([model])

  @@map("param")
}

model Profile {
  user_id         String              @id
  avatar_url      String?
  created_at      DateTime            @default(now())
  username        String?

  recommendations Recommendation[]
  uploads         Upload[]
  activity_items         UserActivityItem[]
  activity_recommendations UserActivityRecommendation[]
  activity_suggestions   UserActivitySuggestion[]
  favorites  Favorite[]

  @@index([username])

  @@map("profile")
}

model Recommendation {
  id          Int        @id @default(autoincrement())
  created_at  DateTime   @default(now())
  param_id    Int?
  upload_id   Int?
  user_id     String?

  param         Param?     @relation(fields: [param_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  upload        Upload?    @relation(fields: [upload_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user          Profile?   @relation(fields: [user_id], references: [user_id], onUpdate: Cascade, onDelete: SetNull)
  suggestions   Suggestion[]
  activity_recommendations UserActivityRecommendation[]

  @@index([param_id])  
  @@index([upload_id]) 
  @@index([user_id])   
  @@index([created_at])

  @@map("recommendation")
}

model Result {
  id            Int         @id @default(autoincrement())
  created_at    DateTime    @default(now())
  distance      Float?
  item_id       String?
  suggestion_id Int?

  item        Item?       @relation(fields: [item_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  suggestion  Suggestion? @relation(fields: [suggestion_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([item_id])       
  @@index([suggestion_id]) 
  @@index([distance])

  @@map("result")
}

model Suggestion {
  id                Int        @id @default(autoincrement())
  created_at        DateTime   @default(now())
  description       String?
  label_string      String?
  recommendation_id Int?
  style_name        String?

  recommendation  Recommendation? @relation(fields: [recommendation_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  results         Result[]
  activity_suggestions UserActivitySuggestion[]

  @@index([recommendation_id])
  @@index([style_name])

  @@map("suggestion")
}

model Upload {
  id             Int        @id @default(autoincrement())
  created_at     DateTime   @default(now())
  image_url      String?
  user_id        String?

  user           Profile?   @relation(fields: [user_id], references: [user_id], onUpdate: Cascade, onDelete: Cascade)
  recommendations Recommendation[]

  @@index([user_id])

  @@map("upload")
}

model UserActivityItem {
  id            Int      @id @default(autoincrement())
  user_id        String?
  item_id        String?
  activity_type  String?
  activity_time  DateTime @default(now())

  user   Profile? @relation(fields: [user_id], references: [user_id], onUpdate: Cascade, onDelete: SetNull)
  item   Item?    @relation(fields: [item_id], references: [id], onUpdate: Cascade, onDelete: SetNull)

  @@index([user_id])
  @@index([item_id])

  @@map("user_activity_item")
}

model UserActivityRecommendation {
  id               Int      @id @default(autoincrement())
  user_id           String?
  recommendation_id Int?
  activity_type     String?
  activity_time     DateTime @default(now())

  user           Profile?        @relation(fields: [user_id], references: [user_id], onUpdate: Cascade, onDelete: SetNull)
  recommendation Recommendation? @relation(fields: [recommendation_id], references: [id], onUpdate: Cascade, onDelete: SetNull)

  @@index([user_id])
  @@index([recommendation_id])

  @@map("user_activity_recommendation")
}

model UserActivitySuggestion {
  id             Int      @id @default(autoincrement())
  user_id         String?
  suggestion_id   Int?
  activity_type   String?
  activity_time   DateTime @default(now())

  user        Profile?      @relation(fields: [user_id], references: [user_id], onUpdate: Cascade, onDelete: SetNull)
  suggestion  Suggestion?   @relation(fields: [suggestion_id], references: [id], onUpdate: Cascade, onDelete: SetNull)

  @@index([user_id])
  @@index([suggestion_id])

  @@map("user_activity_suggestion")
}

model Favorite {
  user_id    String
  series_id  String
  
  Profile    Profile?   @relation(fields: [user_id], references: [user_id], onUpdate: Cascade, onDelete: NoAction)

  @@id([user_id, series_id])
  @@index([user_id])
  @@index([series_id])

  @@map("favorite")
}
